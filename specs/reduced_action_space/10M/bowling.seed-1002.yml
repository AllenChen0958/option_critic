# Name of the spec
name: option_critic

# Description of the spec
description: Train option critic on an environment with a specified random seed

################################################################################
# Experiments
################################################################################

# The default properties for each experiment
experiment_default:
  envs:
    # Names
    NAME: reduced_action_space.10M.run-0
    # Training arguments
    ENV_ID: bowling
    EPOCHS: 40
    NUM_OPTIONS: 8
    SEED: 1002
    # CUDA
    CUSTOM_CUDA_VISIBLE_DEVICES: 0,1,2
    # Theano
    THEANO_FLAGS: contexts=dev0->cuda0;dev1->cuda1;dev2->cuda2,floatX=float32,device=cuda2
    # Conda
    CONDA_ENV_NAME: option_critic
    # Tmux
    TMUX_SESSION_NAME: train/option_critic/${NAME//./,}/env_id-$ENV_ID/seed-$SEED
    # Paths
    PROJECT_DIR: $HOME/option_critic
    SUB_DIR: $NAME/env_id-$ENV_ID/seed-$SEED
    LOG_DIR: $PROJECT_DIR/logs/train/$SUB_DIR
    LOG_STDOUT_PATH: $LOG_DIR/stdout.log
    LOG_STDERR_PATH: $LOG_DIR/stderr.log
    MODEL_DIR: $PROJECT_DIR/models/$SUB_DIR
    ZIP_DIR: $PROJECT_DIR/downloads
    ZIP_NAME: $NAME.env_id-$ENV_ID.seed-$SEED

# Runs before the start of main experiments
before_all_experiments:
- name: check_old_file
  description: Check whether the old log exists for "stop" and "purge" command types
  commands:
    stop:
    # Go to project directory
    - "local:cd $PROJECT_DIR"
    # Check whether the Noodles status file exists
    - >-
      local:[ ! -f "logs/noodles/$NAME.noodles_status.yml" ]
      && (echo Has not run experiments yet >&2; exit 1)
      || echo Old experiments detected
    purge:
    # Go to project directory
    - "local:cd $PROJECT_DIR"
    # Check whether the Noodles status file exists
    - >-
      local:[ ! -f "logs/noodles/$NAME.noodles_status.yml" ]
      && (echo Has not run experiments yet >&2; exit 1)
      || echo Old experiments detected

# The main experiments
experiments:

### Run ###

- name: run
  requirements:
    run:
    - cpu_usage: "<=0.7"
    - cpu_load: "<=60"
    - memory_usage: "<=0.7"
    - cuda_gpu_utilization: "<=0.7"
    - cuda_memory_usage: "<=0.7"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run:
    # Source ~/.bash_profile
    - "[ -f ~/.bash_profile ] && source ~/.bash_profile || true"
    # Go to project directory
    - "cd $PROJECT_DIR"
    # Make sure the remote training logs directory exists
    - "mkdir -p $LOG_DIR"
    # Make sure the remote training models directory exists
    - "mkdir -p $MODEL_DIR"
    # Activate the conda environment
    - "conda activate $CONDA_ENV_NAME"
    # Train the algorithm in Tmux detached session
    - >-
      tmux new -d -s "$TMUX_SESSION_NAME"
      "CUDA_VISIBLE_DEVICES=$CUSTOM_CUDA_VISIBLE_DEVICES
      THEANO_FLAGS=\"$THEANO_FLAGS\"
      python train_q.py
      --rom=$ENV_ID
      --epochs=$EPOCHS
      --num-options=$NUM_OPTIONS
      --seed=$SEED
      --reduce_action_space=true
      --folder-name=$MODEL_DIR
      > >(tee \"$LOG_STDOUT_PATH\")
      2> >(tee \"$LOG_STDERR_PATH\" >&2)"
    stop:
    # Kill the Tmux session
    - >-
      tmux kill-ses -t "$TMUX_SESSION_NAME" 2> /dev/null || true
    purge:
    # Go to project directory
    - "cd $PROJECT_DIR"
    # Kill the Tmux session
    - >-
      tmux kill-ses -t "$TMUX_SESSION_NAME" 2> /dev/null || true
    # Remove log directory
    - "rm -rf $LOG_DIR"
    # Remove model directory
    - "rm -rf $MODEL_DIR"
    # Remove the remote zip
    - "remote:rm -f $ZIP_DIR/$ZIP_NAME.zip"
    # Remove the local zip
    - "local:rm -f $ZIP_DIR/$ZIP_NAME.zip"
    # Remove the Noodles status
    - "local:rm -f $PROJECT_DIR/logs/$NAME.noodles_status.yml"

### Download ###

- name: download
  description: Zip the experimental results and download the zip to local
  depends_on:
    run:
    - run
  requirements:
    run:
    - has_log: "==Yes"
    - tmux_count: "<=0"
  commands:
    run:
    # Go to project directory
    - "cd $PROJECT_DIR"
    # Make sure the zip directory exists
    - "mkdir -p $ZIP_DIR"
    # Remove the old zip
    - "rm -f $ZIP_DIR/$ZIP_NAME.zip"
    # Zip the directories
    - >-
      zip -r "$ZIP_DIR/$ZIP_NAME.zip" "logs/train/$SUB_DIR" "models/$SUB_DIR"
    # Use SCP to download the zip to local
    - >-
      local:scp $NOODLES_SERVER_AUTHORITY:"$ZIP_DIR/$ZIP_NAME.zip" "$ZIP_DIR/$ZIP_NAME.zip"

################################################################################
# Servers
################################################################################

# The default properties for each server
server_default:
  # Path to the private key on local
  private_key_path: $HOME/.ssh/id_rsa
  # Username on the server (e.g., 'user1')
  username: $USER

# All servers
servers:
- name: Elsa Kida
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: kida
- name: Elsa Lady
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: lady

################################################################################
# Requirements
################################################################################

requirements:
  # Check whether the STDOUT log exists
  has_log: "[ -f \"$LOG_STDOUT_PATH\" ] && echo -n Yes || echo -n No"
  # Count the Tmux session
  tmux_count: "tmux ls 2>/dev/null | grep $TMUX_SESSION_NAME | wc -l"

################################################################################
# Deployment
################################################################################

# Path in each command type, as a string for Noodles to write the current
# deployment status to the file in each deployment round
write_status_to:
  run: logs/noodles/$NAME.noodles_status.yml

# The interval to run each deployment round
round_interval: 10

# The interval to deploy each experiment in each round
deployment_interval: 10

# The interval to execute the commands
commands_interval: 5

################################################################################
# Error Handling
################################################################################

# Whether to check any nonzero return code and nonempty stderr and raise error
check_any_errors: True
