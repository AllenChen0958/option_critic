# Name of the spec
name: option_critic

# Description of the spec
description: Train option critic on an environment

################################################################################
# Experiments
################################################################################

# The default properties for each experiment
experiment_default:
  envs:
    # Names
    NAME: classic
    # Training arguments
    ENV_ID: pong
    # Copied from "scripts/.common/set_common_variables.sh"
    CONDA_ENV_NAME: option_critic
    ROOT_LOGS_DIR: logs
    # Copied from "scripts/train/.common/init_training_variables.sh"
    SUB_DIR: "$NAME/env_id-$ENV_ID/seed-$SEED"
    TMUX_SESSION_NAME: "train/$CONDA_ENV_NAME/${SUB_DIR//./,}"
    PROJECT_TMUX_SESSION_PATTERN: "train/$CONDA_ENV_NAME"
    LOG_DIR: "$ROOT_LOGS_DIR/train/$SUB_DIR"
    LOG_STDOUT_PATH: "$LOG_DIR/stdout.log"

# Runs before the start of main experiments
before_all_experiments:
- name: check_old_file
  description: Check whether the old log exists for "stop" and "purge" command types
  commands:
    stop:
    # Check whether the Noodles status file exists
    - >-
      local:[ ! -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml" ]
      && (echo Has not run experiments yet >&2; exit 1)
      || echo Old experiments detected
    purge:
    # Check whether the Noodles status file exists
    - >-
      local:[ ! -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml" ]
      && (echo Has not run experiments yet >&2; exit 1)
      || echo Old experiments detected

# The main experiments
experiments:

### Run ###

- name: run.seed-1000
  envs:
    SEED: 1000
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1001
  envs:
    SEED: 1001
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1002
  envs:
    SEED: 1002
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1003
  envs:
    SEED: 1003
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1004
  envs:
    SEED: 1004
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"


### Download ###

- name: run.seed-1000
  envs:
    SEED: 1000
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1001
  envs:
    SEED: 1001
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1002
  envs:
    SEED: 1002
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1003
  envs:
    SEED: 1003
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"

- name: run.seed-1004
  envs:
    SEED: 1004
  requirements:
    run:
    - cpu_usage: "<0.7"
    - cpu_load: "<60"
    - memory_usage: "<0.5"
    - cuda_gpu_utilization: "<0.7"
    - cuda_memory_usage: "<0.5"
    - project_tmux_count: "<8"
    stop:
    - has_log: "==Yes"
    purge:
    - has_log: "==Yes"
  commands:
    run: |
      # Run the corresponding script
      bash "scripts/train/$NAME/run.env_id-$ENV_ID.seed-$SEED.sh"
    stop: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/stop.sh"
    purge: |
      # Cause the script to exit on any errors
      set -euo pipefail
      # Set the common variables
      source "scripts/.common/set_common_variables.sh"
      # Initialize the training variables
      source "scripts/train/.common/init_training_variables.sh"
      # Run the common script
      bash "scripts/train/.common/purge.sh"
      # Remove the local zip
      local:rm -f "$ZIP_PATH"
      # Remove the Noodles status
      local:rm -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml"


################################################################################
# Servers
################################################################################

# The default properties for each server
server_default:
  # Path to the private key on local
  private_key_path: $HOME/.ssh/id_rsa
  # Username on the server (e.g., 'user1')
  username: $USER

# All servers
servers:
- name: Elsa Kida
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: kida
- name: Elsa Lady
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: lady

################################################################################
# Requirements
################################################################################

requirements:
  # Check whether the STDOUT log exists
  has_log: "[ -f \"$LOG_STDOUT_PATH\" ] && echo -n Yes || echo -n No"
  # Count the Tmux session
  tmux_count: "tmux ls 2>/dev/null | grep $TMUX_SESSION_NAME | wc -l"
  # Count all Tmux sessions related to the current project
  project_tmux_count: "tmux ls 2>/dev/null | grep $PROJECT_TMUX_SESSION_PATTERN | wc -l"

################################################################################
# Deployment
################################################################################

# Path in each command type, as a string for Noodles to write the current
# deployment status to the file in each deployment round
write_status_to:
  run: logs/noodles/noodles_status.$NAME.$ENV_ID.yml

# The interval to run each deployment round
round_interval: 60

# The interval to deploy each experiment in each round
deployment_interval: 60

# The interval to execute the commands
commands_interval: 10

################################################################################
# Error Handling
################################################################################

# Whether to check any nonzero return code and nonempty stderr and raise error
check_any_errors: True
